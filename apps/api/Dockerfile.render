# Production Dockerfile optimized for Render.com deployment
# This uses multi-stage builds to minimize the final image size

# Stage 1: Build the Go binary
FROM golang:1.23-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    git \
    ca-certificates \
    build-base \
    postgresql-client

# Set working directory
WORKDIR /build

# Copy go mod files
COPY apps/api/go.mod apps/api/go.sum ./

# Download dependencies
RUN go mod download

# Copy the entire API source code
COPY apps/api/ ./

# Build the application with optimizations
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags="-w -s -X main.Version=$(git describe --tags --always --dirty) -X main.BuildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
    -a -installsuffix cgo \
    -o server cmd/server/main.go

# Stage 2: Create the minimal runtime image
FROM alpine:3.19

# Install runtime dependencies
RUN apk --no-cache add \
    ca-certificates \
    tzdata \
    postgresql-client \
    curl \
    bash

# Create non-root user
RUN addgroup -g 1000 -S appuser && \
    adduser -u 1000 -S appuser -G appuser

# Set working directory
WORKDIR /app

# Copy the binary from builder
COPY --from=builder /build/server .

# Copy migrations
COPY apps/api/migrations ./migrations

# Create necessary directories with proper permissions
RUN mkdir -p /data/media /app/logs && \
    chown -R appuser:appuser /data /app

# Create a script to run migrations and start the server
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
echo "Starting Trip Planner API..."\n\
\n\
# Wait for database to be ready\n\
echo "Waiting for database..."\n\
until pg_isready -h ${DATABASE_HOST:-localhost} -p ${DATABASE_PORT:-5432} -U ${DATABASE_USER:-postgres}; do\n\
  echo "Database is unavailable - sleeping"\n\
  sleep 2\n\
done\n\
echo "Database is ready!"\n\
\n\
# Run migrations if enabled\n\
if [ "${RUN_MIGRATIONS}" = "true" ]; then\n\
  echo "Running database migrations..."\n\
  ./server migrate up\n\
  echo "Migrations completed!"\n\
fi\n\
\n\
# Start the server\n\
echo "Starting server on port ${PORT:-8080}..."\n\
exec ./server\n\
' > /app/entrypoint.sh && chmod +x /app/entrypoint.sh

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:${PORT:-8080}/api/health || exit 1

# Set environment defaults
ENV PORT=8080 \
    ENVIRONMENT=production \
    RUN_MIGRATIONS=true \
    DATABASE_HOST=localhost \
    DATABASE_PORT=5432 \
    DATABASE_USER=postgres \
    GIN_MODE=release

# Run the entrypoint script
ENTRYPOINT ["/app/entrypoint.sh"]