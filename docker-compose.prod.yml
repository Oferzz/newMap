version: '3.8'

# Production Docker Compose configuration
# This is optimized for deployment but can also be used locally

services:
  # PostgreSQL Database with PostGIS extension
  postgres:
    image: postgis/postgis:16-3.4
    container_name: newMap-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-newMap_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      POSTGRES_DB: ${DB_NAME:-newMap}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-newMap_user} -d ${DB_NAME:-newMap}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - newMap-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: newMap-cache
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD:-changeme}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD:-changeme}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - newMap-network

  # Go API Service
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile.render
    container_name: newMap-api
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # Database
      DATABASE_URL: postgresql://${DB_USER:-newMap_user}:${DB_PASSWORD:-changeme}@postgres:5432/${DB_NAME:-newMap}?sslmode=disable
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: ${DB_USER:-newMap_user}
      
      # Redis
      REDIS_URL: redis://default:${REDIS_PASSWORD:-changeme}@redis:6379
      INTERNAL_REDIS_URL: redis://default:${REDIS_PASSWORD:-changeme}@redis:6379
      
      # Server
      PORT: 8080
      ENVIRONMENT: ${ENVIRONMENT:-production}
      RUN_MIGRATIONS: "true"
      
      # JWT
      JWT_SECRET: ${JWT_SECRET:-changeme-use-secure-secret}
      JWT_ISSUER: newMap
      
      # Media
      MEDIA_PATH: /data/media
      CDN_URL: ${CDN_URL:-http://localhost:8080}
      
      # External Services
      MAPBOX_API_KEY: ${MAPBOX_API_KEY}
      
      # Supabase Configuration (optional - fallback to local DB if not set)
      SUPABASE_PROJECT_URL: ${SUPABASE_PROJECT_URL:-}
      SUPABASE_PROJECT_KEY: ${SUPABASE_PROJECT_KEY:-}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY:-}
      
      # CORS
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost}
    volumes:
      - api_media:/data/media
      - api_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - newMap-network

  # React Frontend (Production Build)
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost/api/v1}
        VITE_WS_URL: ${VITE_WS_URL:-ws://localhost}
        VITE_MAPBOX_TOKEN: ${MAPBOX_API_KEY}
        VITE_SUPABASE_PROJECT_URL: ${SUPABASE_PROJECT_URL:-}
        VITE_SUPABASE_PROJECT_KEY: ${SUPABASE_ANON_KEY:-}
    container_name: newMap-web
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - api
    networks:
      - newMap-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: newMap-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
      # For SSL certificates (Let's Encrypt)
      - ./ssl:/etc/nginx/ssl:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - api
      - web
    networks:
      - newMap-network

  # Certbot for SSL certificates (optional)
  certbot:
    image: certbot/certbot
    container_name: newMap-certbot
    volumes:
      - ./ssl:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    profiles:
      - ssl
    networks:
      - newMap-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_media:
    driver: local
  api_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  newMap-network:
    driver: bridge