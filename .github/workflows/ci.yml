name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ main, master ]

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgis/postgis:16-3.4
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: apps/api/go.sum

      - name: Install dependencies
        working-directory: apps/api
        run: |
          go mod download
          go mod tidy

      - name: Run database migrations
        working-directory: apps/api
        env:
          DATABASE_URL: postgres://testuser:testpass@localhost:5432/testdb?sslmode=disable
        run: |
          go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
          migrate -path ./migrations -database "$DATABASE_URL" up

      - name: Run backend tests
        working-directory: apps/api
        env:
          DATABASE_URL: postgres://testuser:testpass@localhost:5432/testdb?sslmode=disable
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key
        run: |
          go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./apps/api/coverage.txt
          flags: backend
          name: backend-coverage

  backend-lint:
    name: Backend Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: apps/api/go.sum

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          working-directory: apps/api
          args: --timeout=5m

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Install dependencies
        working-directory: apps/web
        run: npm ci

      - name: Run linting
        working-directory: apps/web
        run: npm run lint

      - name: Run type checking
        working-directory: apps/web
        run: npm run typecheck || true  # Allow failure initially

      - name: Run tests
        working-directory: apps/web
        run: npm test -- --coverage --watchAll=false || true  # Allow failure initially

      - name: Build frontend
        working-directory: apps/web
        run: npm run build

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-tests, backend-lint, frontend-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/api
          file: ./apps/api/Dockerfile
          push: false
          tags: trip-platform-api:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-check:
    name: Deployment Configuration Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate render.yaml
        run: |
          if [ -f "render.yaml" ]; then
            echo "✅ render.yaml found"
            # Basic YAML validation
            python -c "import yaml; yaml.safe_load(open('render.yaml'))" || exit 1
            echo "✅ render.yaml is valid YAML"
          else
            echo "❌ render.yaml not found"
            exit 1
          fi

      - name: Check environment variables
        run: |
          echo "Checking required environment variables in render.yaml..."
          required_vars=(
            "DATABASE_URL"
            "JWT_SECRET"
            "REDIS_URL"
            "MAPBOX_API_KEY"
          )
          
          for var in "${required_vars[@]}"; do
            if grep -q "$var" render.yaml; then
              echo "✅ $var is configured"
            else
              echo "⚠️  $var might be missing (check Render dashboard)"
            fi
          done

  # Job to comment on PR with test results
  pr-comment:
    name: PR Test Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ All CI checks passed! Ready for review.'
            })